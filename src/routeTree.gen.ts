/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MerchantsImport } from './routes/merchants'
import { Route as LayoutTermPolicyImport } from './routes/_layout-term-policy'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as LayoutTermPolicyTermsImport } from './routes/_layout-term-policy/terms'
import { Route as LayoutTermPolicyPrivacyPolicyImport } from './routes/_layout-term-policy/privacy-policy'
import { Route as AuthSignUpImport } from './routes/_auth/sign-up'
import { Route as AuthSignInImport } from './routes/_auth/sign-in'

// Create/Update Routes

const MerchantsRoute = MerchantsImport.update({
  path: '/merchants',
  getParentRoute: () => rootRoute,
} as any)

const LayoutTermPolicyRoute = LayoutTermPolicyImport.update({
  id: '/_layout-term-policy',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutTermPolicyTermsRoute = LayoutTermPolicyTermsImport.update({
  path: '/terms',
  getParentRoute: () => LayoutTermPolicyRoute,
} as any)

const LayoutTermPolicyPrivacyPolicyRoute =
  LayoutTermPolicyPrivacyPolicyImport.update({
    path: '/privacy-policy',
    getParentRoute: () => LayoutTermPolicyRoute,
  } as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_layout-term-policy': {
      preLoaderRoute: typeof LayoutTermPolicyImport
      parentRoute: typeof rootRoute
    }
    '/merchants': {
      preLoaderRoute: typeof MerchantsImport
      parentRoute: typeof rootRoute
    }
    '/_auth/sign-in': {
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthImport
    }
    '/_auth/sign-up': {
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof AuthImport
    }
    '/_layout-term-policy/privacy-policy': {
      preLoaderRoute: typeof LayoutTermPolicyPrivacyPolicyImport
      parentRoute: typeof LayoutTermPolicyImport
    }
    '/_layout-term-policy/terms': {
      preLoaderRoute: typeof LayoutTermPolicyTermsImport
      parentRoute: typeof LayoutTermPolicyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AuthRoute.addChildren([AuthSignInRoute, AuthSignUpRoute]),
  LayoutTermPolicyRoute.addChildren([
    LayoutTermPolicyPrivacyPolicyRoute,
    LayoutTermPolicyTermsRoute,
  ]),
  MerchantsRoute,
])

/* prettier-ignore-end */
